version: "3.9"
services:
    zookeeper:
        image: debezium/zookeeper:${ZOOKEEPER_VERSION}
        restart: always
        ports:
            - ${ZOOKEEPER_PORT}:2181
            - 2888:2888
            - 3888:3888
        environment:
            # ZOOKEEPER_CLIENT_PORT: 2181
            SEVER_ID: 1
            SERVER_COUNT: 1
            # LOG_LEVEL: info
        volumes:
            - $PWD/zookeeper/data:/zookeeper/data
            - $PWD/zookeeper/txns:/zookeeper/txns
    kafka:
        image: debezium/kafka:${KAFKA_VERSION}
        depends_on: [zookeeper]
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_CLIENT_PORT}
            KAFKA_CREATE_TOPICS: ${KAFKA_TOPIC_EINS}:1:2
            # KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:${9092}
        links:
          - zookeeper
        ports:
            - 9092:9092
        volumes:
          - $PWD/kafka/data:kafka/data
    redis:
        image: redis
        environment:
            redis_uri: ${REDIS_URI}
    postgres:
        container_name: postgres_db
        hostname: db
        image: debezium/postgres:12
        # healthcheck:
        #     test: "pg_isready -U postgresuser -d ${DB_NAME}"
        #     interval: 2s
        #     timeout: 20s
        #     retries: 10
        volumes:
            - ./data:/docker-entrypoint-initdb.d
            # - pgdata:/var/lib/postgresql/data
        restart: on-failure:2
        environment:
            POSTGRES_PASSWORD: ${DB_PASSWORD}
            POSTGRES_USERNAME: ${DB_USERNAME}
            POSTGRES_USER: ${DB_USERNAME}
            POSTGRES_PORT: ${DB_PORT}
            POSTGRES_HOST: ${DB_HOST}
            POSTGRES_NAME: ${DB_NAME}
            # POSTGRES_DB: ${DB_NAME}
        ports:
          - ${DB_PORT}:5432
    # connect:
    #     image: debezium/connect:latest
    #     ports:
    #         - 8083:8083
    #     environment:
    #         GROUP_ID: 1
    #         CONFIG_STORAGE_TOPIC: my_connect_configs
    #         OFFSET_STORAGE_TOPIC: my_connect_offsets
    #         STATUS_STORAGE_TOPIC: my_connect_statuses
    #     depends_on:
    #         - postgres
    #         - kafka
    #         - zookeeper
    #     links:
    #         - kafka
    #         - postgres
    #         - zookeeper
    schema-registry:
        image: confluentinc/cp-schema-registry:5.5.3
        environment:
            SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181
            SCHEMA_REGISTRY_HOST_NAME: schema-registry
            SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081,http://localhost:8081
        depends_on: [zookeeper, kafka]
    web:
        depends_on:
            - postgres
            - redis
        ports:
            - ${APP_PORT}:8000
        links:
            - postgres
        environment:
            app__db__username: ${DB_USERNAME:-postgres}
            app__db__password: ${DB_PASSWORD:?database password not set}
            app__db__port: ${DB_PORT:-5432}
            app__db__host: db
            app__db__name: ${DB_NAME:-play_auth}
            app__db__require_ssl: ${DB_SSL:-false}
            app__email__smtp_server: ${SMTP_SERVER}
            app__email__smtp_user: ${SMTP_USER}
            app__email__smtp_pass: ${SMTP_PASS}
            app__app_env: ${APP_ENV:-test}
            app__app__m_cost: ${M_COST}
            app__app__t_cost: ${T_COST}
            app__app__p_cost: ${P_COST}
            app__app__port: ${APP_PORT}
            app__app_name: ${APP_NAME}
            app__redis_uri: ${REDIS_URI}
            app__app__frontend_url: ${FRONTEND_URL}
            app__app__jwt_secret: ${JWT_SECRET}
# networks:
#     webnet:
#         driver: bridge
volumes:
    pgdata:
    static_volume:
