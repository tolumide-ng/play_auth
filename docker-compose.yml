version: "3.9"
services:
    zookeeper:
        image: zookeeper:latest
        restart: always
        ports:
            - 2181:2181
        networks:
            - webnet
        environment:
            ZOOKEEPER_CLIENT_PORT=2181
    kafka:
        image: bitnami/kafka:latest
        # volumes:
            # -/:/bitnami/kafka
        depends_on: [zookeeper]
        networks:
            - webnet
        environment:
            KAFKA_BROKER_ID=1
            KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
            ALLOW_PLAINTEXT_LISTENER=yes
            KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
            KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
            KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
            KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
            KAFKA_ZOOKEEPER_PROTOCOL=PLAINTEXT
            # KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092
            # KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
            # KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
            # KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
            # KAFKA_OFFSET_TOPIC_REPLICATION_FACTOR: 1
            # KAFKA_JMX_PORT: 9991
        ports:
            # - 9092:9092
            - '9093:9093'
    postgres:
        hostname: db
        image: debezium/postgres:latest
        ports:
          - ${DB_PORT}:5432
        healthcheck:
            test: "pg_isready -U postgresuer -d shipment_db"
            interval: 1m30s
            timeout: 30s
            retries: 10
            start_period: 30s
        networks:
            - webnet
        volumes:
            - ./data:/docker-entrypoint-initdb.d
            - pgdata:/var/lib/postgresql/data
            - ./scripts:/docker-entrypoint-initdb.d
        restart: on-failure:2
        environment:
            POSTGRES_USERNAME: ${DB_USERNAME}
            # POSTGRES_PASSWORD: ${DB_PASSWORD}
            POSTGRES_PORT: ${DB_PORT}
            POSTGRES_HOST: ${DB_HOST}
            POSTGRES_NAME: ${DB_NAME}
            # 
            POSTGRES_USER: postgresuser
            POSTGRES_PASSWORD: postgrepw
            POSTGRES_DB: play_auth
            PGPASSWORD: postgrespw
    debezium:
        image: debezium/connect:14
        environment:
            BOOTSTRAP_SERVERS: kafka:9092
            GROUP_ID: 1
            CONFIG_STORAGE_TOPIC: connect_configs
            OFFSET_STORAGE_TOPIC: connect_offsets
            KEY_CONVERTER: io.confluent.connect.avro.AvroConnect
            VALUE_CONVERTER: io.confluent.connect.avro.AvroConnect
            CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
            CONNECT_VALUE_CONVERTER_SCHEMA_REGSITRY_URL: http://schema-registry:8081
        depends_on: [kafka]
        ports:
            - 8083:8083
    schema_registry:
        image: confluentinc/cp-schema-registry:5.5.3
        environment:
            - SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL=2181
            - SCHEMA_REGISTRY_HOST_NAME=schema_registry
            - SCHEMA_REGISTRY_LISTENERS=http://schema-registry:8081,http://localhost:8081
    redis:
        image: redis
        networks:
            - webnet
        environment:
            redis_uri: ${REDIS_URI}
    web:
        depends_on:
            - postgres
            - redis
        ports:
          - ${APP_PORT}:8000
        networks:
            - webnet
        links:
          - postgres
        environment:
            app__db__username: ${DB_USERNAME:-postgres}
            app__db__password: ${DB_PASSWORD:?database password not set}
            app__db__port: ${DB_PORT:-5432}
            app__db__host: db
            app__db__name: ${DB_NAME:-play_auth}
            app__db__require_ssl: ${DB_SSL:-false}
            app__email__smtp_server: ${SMTP_SERVER}
            app__email__smtp_user: ${SMTP_USER}
            app__email__smtp_pass: ${SMTP_PASS}
            app__app_env: ${APP_ENV:-test}
            app__app__m_cost: ${M_COST}
            app__app__t_cost: ${T_COST}
            app__app__p_cost: ${P_COST}
            app__app__port: ${APP_PORT}
            app__app_name: ${APP_NAME}
            app__redis_uri: ${REDIS_URI}
            app__app__frontend_url: ${FRONTEND_URL}
            app__app__jwt_secret: ${JWT_SECRET}
networks:
    webnet:
        driver: bridge
volumes:
    pgdata:
    static_volume:
