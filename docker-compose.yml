version: "3.9"
services:
    zookeeper:
        image: zookeeper:latest
        restart: always
        ports:
            - 2181:2181
        networks:
            - webnet
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
    kafka:
        image: bitnami/kafka:latest
        # volume:
        #     - ~/:/bitnami/kafka
        depends_on: [zookeeper]
        networks:
            - webnet
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
            ALLOW_PLAINTEXT_LISTENER: yes
            KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
            KAFKA_CFG_LISTENERS: CLIENT://:9092,EXTERNAL://:9093
            KAFKA_CFG_ADVERTISED_LISTENERS: CLIENT://kafka:9092,EXTERNAL://localhost:9093
            KAFKA_CFG_INTER_BROKER_LISTENER_NAME: CLIENT
            KAFKA_ZOOKEEPER_PROTOCOL: PLAINTEXT
            # KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092
            # KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
            # KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
            # KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
            # KAFKA_OFFSET_TOPIC_REPLICATION_FACTOR: 1-0o0p-9i0o-=p
            # KAFKA_JMX_PORT: 9991
        ports:
            - 9092:9092
    redis:
        image: redis
        networks:
            - webnet
        environment:
            redis_uri: ${REDIS_URI}
    postgres:
        hostname: db
        image: debezium/postgres:12
        networks:
            - webnet
        # healthcheck:
        #     test: "pg_isready -U postgresuser -d ${DB_NAME}"
        #     interval: 2s
        #     timeout: 20s
        #     retries: 10
        volumes:
            - ./data:/docker-entrypoint-initdb.d
            # - pgdata:/var/lib/postgresql/data
        restart: on-failure:2
        environment:
            POSTGRES_PASSWORD: ${DB_PASSWORD}
            POSTGRES_USERNAME: ${DB_USERNAME}
            POSTGRES_USER: ${DB_USERNAME}
            POSTGRES_PORT: ${DB_PORT}
            POSTGRES_HOST: ${DB_HOST}
            POSTGRES_NAME: ${DB_NAME}
            # POSTGRES_DB: ${DB_NAME}
        ports:
          - ${DB_PORT}:5432
    web:
        depends_on:
            - postgres
            - redis
        ports:
          - ${APP_PORT}:8000
        networks:
            - webnet
        links:
          - postgres
        environment:
            app__db__username: ${DB_USERNAME:-postgres}
            app__db__password: ${DB_PASSWORD:?database password not set}
            app__db__port: ${DB_PORT:-5432}
            app__db__host: db
            app__db__name: ${DB_NAME:-play_auth}
            app__db__require_ssl: ${DB_SSL:-false}
            app__email__smtp_server: ${SMTP_SERVER}
            app__email__smtp_user: ${SMTP_USER}
            app__email__smtp_pass: ${SMTP_PASS}
            app__app_env: ${APP_ENV:-test}
            app__app__m_cost: ${M_COST}
            app__app__t_cost: ${T_COST}
            app__app__p_cost: ${P_COST}
            app__app__port: ${APP_PORT}
            app__app_name: ${APP_NAME}
            app__redis_uri: ${REDIS_URI}
            app__app__frontend_url: ${FRONTEND_URL}
            app__app__jwt_secret: ${JWT_SECRET}
networks:
    webnet:
        driver: bridge
volumes:
    pgdata:
    static_volume:
